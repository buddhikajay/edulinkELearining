<?php

namespace Siplo\SchedulerBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository
{
    /**
     * @param \DateTime $startDateTime
     * @param \DateTime $endDateTime
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     *
     * SELECT e.id, e.startDateTime, e.endDateTime, e.title FROM
     * `users_events` u
     * INNER JOIN `event` e ON u.event_id = e.id
     * WHERE
     * (e.startDateTime BETWEEN '2016-02-12 08:00:00' AND '2016-02-12 10:00:00'
     * OR
     * e.endDateTime BETWEEN '2016-02-12 08:00:00' AND '2016-02-12 10:00:00'
     * OR
     * e.startDateTime = '2016-02-12 08:00:00'
     * OR
     * e.endDateTime = '2016-02-12 10:00:00'
     * )
     * AND u.user_id = 2
     * AND e.title !="Free Slot"
     * ORDER BY e.startDateTime ;
     */
    public function findByOverlappingEvent($userId,\DateTime $startDateTime, \DateTime $endDateTime){
        $em = $this->getEntityManager();
        $connection = $em->getConnection();
        $statement = $connection->prepare("SELECT e.id, e.startDateTime, e.endDateTime, e.title FROM `users_events` u INNER JOIN `event` e ON u.event_id = e.id WHERE (e.startDateTime BETWEEN :startDateTime1 AND :endDateTime1 OR e.endDateTime BETWEEN :startDateTime2 AND :endDateTime2 OR e.startDateTime = :startDateTime3 OR e.endDateTime = :endDateTime3) AND u.user_id = :userId AND e.title !='Free Slot' ORDER BY e.startDateTime");
//        $statement->bindValue('startDateTime1', $startDateTime->format("Y-m-d H:i:s"));
//        $statement->bindValue('endtDateTime1', $endDateTime->format("Y-m-d H:i:s"));
//        $statement->bindValue('startDateTime2', $startDateTime->format("Y-m-d H:i:s"));
//        $statement->bindValue('endtDateTime2', $endDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('startDateTime1', $startDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('endDateTime1', $endDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('startDateTime2', $startDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('endDateTime2', $endDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('startDateTime3', $startDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('endDateTime3', $endDateTime->format("Y-m-d H:i:s"));
        $statement->bindValue('userId', $userId);
        $statement->execute();
        $result = $statement->fetch();
        if(empty($result)){
            return null;
        }
        else{
            return $result;
        }
    }
}
